package com.darshil.chat.game;

import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.Random;
import java.util.logging.Logger;

@Component
public class Start {
    private static final Logger logger = Logger.getLogger(Start.class.getName());

    private String wordToGuess;
    private int remainingTime;  // Remaining time in seconds
    private static final int TOTAL_TIME = 60;
    public int word_index;

    String[] words = {"Krish", "Sultan", "Dangal"};
    String[] description = {"_ _ i _ _", "_ u _ _ a _", "_ a _ _ a _"};


    HashMap<String, Integer> players = new HashMap<>(); // Tracks players and their win counts
    HashMap<String, Integer> turn = new HashMap<>();

    public Start() {
        initialize();
    }

    public void initialize() {
        if(wordToGuess == null || wordToGuess == "") {
            wordToGuess = getRandomWord();
        }
        remainingTime = TOTAL_TIME;
        logger.info("Initial word generated: " + wordToGuess);
    }

    private String getRandomWord() {
        
        Random random = new Random();
        word_index = random.nextInt(words.length);
        return words[word_index];
    }

    // Scheduled method to update the wordToGuess every TOTAL_TIME seconds
    @Scheduled(fixedRate = TOTAL_TIME * 1000) // Update interval in milliseconds
    public void updateWordToGuess() {
        wordToGuess = getRandomWord();
        remainingTime = TOTAL_TIME;
        logger.info("New word generated by timer: " + wordToGuess);
        turn = new HashMap<>();

    }

    // Scheduled method to decrease the remaining time every second
    @Scheduled(fixedRate = 1000)  // 1-second interval
    public void decrementTimer() {
        if (remainingTime > 0) {
            remainingTime--;
            logger.info("Remaining time: " + remainingTime + " seconds");
            logger.info("Word to guess: " + wordToGuess);
        }
    }

    public String getWordHint() {
        return description[word_index];
    }

    public String getWordToGuess() {
        return wordToGuess;
    }

    public int getRemainingTime() {
        return remainingTime;
    }

    public void incrementWins(String username){
        players.put(username, players.getOrDefault(username,0)+1);
    }

    public int getWins(String username){
        return players.getOrDefault(username,0);
    }

    public int getTurn(String username){
        return turn.getOrDefault(username,1);
    }

    public void decrementTurn(String username){
        turn.put(username, turn.getOrDefault(username,1)-1);
    }

    public void putPlayer(String username){
        players.put(username,0);
    }

    public HashMap<String,Integer> getPlayers(){
        return players;
    }
    

}
